
-- create a database and use it
CREATE DATABASE my_app;
USE my_app;



-- ONE TO ONE RELATIONSHIP -------------------------------------

-- creating a table
CREATE TABLE users(
	id INT UNSIGNED NOT NULL AUTO_INCREMENT,
    first_name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255) NOT NULL,
    PRIMARY KEY(id)
);

SHOW TABLES;
SELECT * FROM users;

-- inserting records into a table
INSERT INTO users(first_name, last_name) VALUES('Jane', 'Doe'), ('John', 'Smith'), ('Marielle', 'Lopez');

-- creating emails tables
CREATE TABLE emails(
	id INT UNSIGNED NOT NULL AUTO_INCREMENT,
    email_address VARCHAR(255) NOT NULL UNIQUE,
    user_id INT UNSIGNED NOT NULL UNIQUE, -- unique constraint
    PRIMARY KEY(id),
    FOREIGN KEY(user_id) REFERENCES users(id)
);

-- inserting records into emails tables
INSERT INTO emails(email_address, user_id) 
VALUES ('marielle@email.com', 6);

INSERT INTO users(first_name, last_name) VALUES ('Alex', 'Baulderstone');

INSERT INTO emails(email_address) VALUES ('someone@email.com'); -- allowed because user_id can be null

INSERT INTO emails(email_address, user_id) 
VALUES ('alsojane@email.com', 1); -- this will throw an error due to unique constraint; duplicate entry

INSERT INTO emails(email_address, user_id) 
VALUES ('alsojane@email.com', 123); -- this will throw an error due to foreign key constraint

-- joining tables
SELECT *
FROM users AS u
LEFT JOIN emails AS e ON (u.id = e.user_id);

SELECT *
FROM users AS u
RIGHT JOIN emails AS e ON (u.id = e.user_id);

SELECT * FROM users;
SELECT * FROM emails;



-- ONE TO MANY RELATIONSHIP -------------------------------------

-- create cohorts table first because students will have a foreign key referencing this cohorts table
CREATE TABLE cohorts(
	id INT UNSIGNED NOT NULL AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL UNIQUE,
    PRIMARY KEY(id)
);

CREATE TABLE students(
	id INT UNSIGNED NOT NULL AUTO_INCREMENT,
    full_name VARCHAR(255) NOT NULL,
    -- cohort_id allowed to be not null to be able to store students that don't belong to a cohort yet
    -- cohort_id not unique to allow students to belong to the same cohort
    cohort_id INT UNSIGNED, 
    PRIMARY KEY(id),
    FOREIGN KEY(cohort_id) REFERENCES cohorts(id)
);

INSERT INTO cohorts (name) VALUES ('Wales'), ('Vanuatu'), ('Uruguay'), ('Iceland');

INSERT INTO students (full_name, cohort_id) 
VALUES 
	('Martyna Krol', 4), 
    ('Marielle Lopez', 1), 
    ('Jane Doe', 2), 
    ('John Smith', 3);
    
SELECT * FROM students;

SELECT c.name AS cohort, s.full_name AS student
FROM students AS s
INNER JOIN cohorts AS c ON (s.cohort_id = c.id);



-- MANY TO MANY RELATIONSHIP -------------------------------------

-- first entity
CREATE TABLE coaches(
	id INT UNSIGNED NOT NULL AUTO_INCREMENT,
    full_name VARCHAR(255) NOT NULL,
    job_title VARCHAR(255) NOT NULL,
    PRIMARY KEY(id)
);

-- second entity
CREATE TABLE projects(
	id INT UNSIGNED NOT NULL AUTO_INCREMENT,
    title VARCHAR(255) NOT NULL UNIQUE,
    PRIMARY KEY(id)
);

-- join table
CREATE TABLE coaches_projects(
	-- not necessary, the uniqueness of each row is already generated by the combination of the coach_id and project_id
	id INT UNSIGNED NOT NULL AUTO_INCREMENT,
    coach_id INT UNSIGNED NOT NULL, -- not unique because coaches can work on multiple projects
    project_id INT UNSIGNED NOT NULL, -- not unique because projects can have many coaches
    PRIMARY KEY(id),
    FOREIGN KEY(coach_id) REFERENCES coaches(id),
    FOREIGN KEY(project_id) REFERENCES projects(id)
);

INSERT INTO coaches(full_name, job_title) 
VALUES 
	('Martyna Krol', 'Junior Coach'),
    ('Alex Baulderstone', 'Senior Coach'),
    ('Calum Hill-Cawthorne', 'Head of Education');

SELECT * FROM coaches;

INSERT INTO projects(title) 
VALUES 
	('Student Tracker'), 
    ('Employee Creator'), 
    ('Events Calendar');

SELECT * FROM projects;

INSERT INTO coaches_projects(coach_id, project_id) 
VALUES 
	(1, 1),
    (1, 3),
    (2, 1),
    (2, 2),
    (3, 1);
    
SELECT c.full_name AS coach, c.job_title, p.title AS project
FROM coaches AS c
INNER JOIN coaches_projects AS cp ON (c.id = cp.coach_id)
INNER JOIN projects AS p ON (p.id = cp.project_id);